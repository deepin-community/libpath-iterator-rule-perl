Source: libpath-iterator-rule-perl
Section: perl
Priority: optional
Build-Depends:
 debhelper-compat (= 13),
 libnumber-compare-perl <!nocheck>,
 libtext-glob-perl <!nocheck>,
 libtry-tiny-perl <!nocheck>,
 libfile-pushd-perl <!nocheck>,
 libpath-tiny-perl <!nocheck>,
 libtest-deep-perl <!nocheck>,
 libtest-filename-perl <!nocheck>,
 libcpan-meta-perl <!nocheck>,
 libcpan-meta-requirements-perl <!nocheck>,
Maintainer: Debian Perl Group <pkg-perl-maintainers@lists.alioth.debian.org>
Uploaders: Jonas Smedegaard <dr@jones.dk>
Standards-Version: 4.6.0
Vcs-Git: https://salsa.debian.org/perl-team/modules/packages/libpath-iterator-rule-perl.git
Vcs-Browser: https://salsa.debian.org/perl-team/modules/packages/libpath-iterator-rule-perl
Homepage: https://github.com/dagolden/Path-Iterator-Rule
Testsuite: autopkgtest-pkg-perl
Rules-Requires-Root: no

Package: libpath-iterator-rule-perl
Architecture: all
Depends:
 libnumber-compare-perl,
 libtext-glob-perl,
 libtry-tiny-perl,
 ${misc:Depends},
 ${perl:Depends}
Description: iterative, recursive file finder
 Path::Iterator::Rule iterates over files and directories
 to identify ones matching a user-defined set of rules.
 The API is based heavily on File::Find::Rule,
 but with more explicit distinction between matching rules
 and options that influence how directories are searched.
 A Path::Iterator::Rule object is a collection of rules (match criteria)
 with methods to add additional criteria.
 Options that control directory traversal are given as arguments
 to the method that generates an iterator.
 .
 Here is a summary of features
 for comparison to other file finding modules:
  * provides many "helper" methods for specifying rules
  * offers (lazy) iterator and flattened list interfaces
  * custom rules implemented with callbacks
  * breadth-first (default) or pre- or post-order depth-first searching
  * follows symlinks (by default, but can be disabled)
  * directories visited only once (no infinite loop; can be disabled)
  * doesn't chdir during operation
  * provides an API for extensions
 .
 As a convenience, the PIR module is an empty subclass of this one
 that is less arduous to type for one-liners.
